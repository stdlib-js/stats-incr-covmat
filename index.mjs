// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{isPrimitive as e}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.2.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-square-matrix@v0.2.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-vector-like@v0.2.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-ctor@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-ctor@v0.2.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-numel@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";function m(e,r){return(r?i:s)("float64",new n(e*e),[e,e],[e,1],0,"row-major")}function d(e){var r;return r=new n(e),i("float64",r,[e],[1],0,"row-major")}function l(s,i){var l,u,h,c,f,p;if(p=0,e(s))u=m(l=s,!1);else{if(!r(s))throw new TypeError(o("invalid argument. First argument must either specify the order of the covariance matrix or be a square two-dimensional ndarray for storing the covariance matrix. Value: `%s`.",s));l=s.shape[0],u=s}if(f=new n(l),c=m(l,!0),arguments.length>1){if(!t(i))throw new TypeError(o("invalid argument. Second argument must be a one-dimensional ndarray. Value: `%s`.",i));if(a(i.shape)!==l)throw new Error(o("invalid argument. The number of elements (means) in the second argument must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",l,a(i.shape)));return h=i,g}return h=d(l),v;function v(e){var r,n,s,i,a,m,d,v,g;if(0===arguments.length)return 0===p?null:u;if(!t(e))throw new TypeError(o("invalid argument. Must provide a one-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==l)throw new Error(o("invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",l,e.shape[0]));for(d=(m=p)/(p+=1),n=m||1,v=0;v<l;v++)for(a=h.get(v),f[v]=e.get(v)-a,a+=f[v]/p,h.set(v,a),s=d*f[v],g=0;g<=v;g++)i=c.get(v,g)+s*f[g],c.set(v,g,i),c.set(g,v,i),r=i/n,u.set(v,g,r),u.set(g,v,r);return u}function g(e){var r,n,s,i,a;if(0===arguments.length)return 0===p?null:u;if(!t(e))throw new TypeError(o("invalid argument. Must provide a one-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==l)throw new Error(o("invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",l,e.shape[0]));for(p+=1,i=0;i<l;i++)for(f[i]=e.get(i)-h.get(i),s=f[i],a=0;a<=i;a++)n=c.get(i,a)+s*f[a],c.set(i,a,n),c.set(a,i,n),r=n/p,u.set(i,a,r),u.set(a,i,r);return u}}export{l as default};
//# sourceMappingURL=index.mjs.map
