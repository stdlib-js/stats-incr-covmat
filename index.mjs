// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-square-matrix@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-vector-like@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-ctor@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-ctor@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-numel@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";var m=e.isPrimitive,d=r,l=t,u=n,h=s,c=i,f=a,p=o;function g(e,r){return(r?c:h)("float64",new u(e*e),[e,e],[e,1],0,"row-major")}function v(e){var r;return r=new u(e),c("float64",r,[e],[1],0,"row-major")}var j=function(e,r){var t,n,s,i,a,o;if(o=0,m(e))n=g(t=e,!1);else{if(!d(e))throw new TypeError(p("invalid argument. First argument must either specify the order of the covariance matrix or be a square 2-dimensional ndarray for storing the covariance matrix. Value: `%s`.",e));t=e.shape[0],n=e}if(a=new u(t),i=g(t,!0),arguments.length>1){if(!l(r))throw new TypeError(p("invalid argument. Second argument must be a 1-dimensional ndarray. Value: `%s`.",r));if(f(r.shape)!==t)throw new Error(p("invalid argument. The number of elements (means) in the second argument must match covariance matrix dimensions. Expected: %u. Actual: %u.",t,f(r.shape)));return s=r,c}return s=v(t),h;function h(e){var r,m,d,u,h,c,f,g,v;if(0===arguments.length)return 0===o?null:n;if(!l(e))throw new TypeError(p("invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==t)throw new Error(p("invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",t,e.shape[0]));for(f=(c=o)/(o+=1),m=c||1,g=0;g<t;g++)for(h=s.get(g),a[g]=e.get(g)-h,h+=a[g]/o,s.set(g,h),d=f*a[g],v=0;v<=g;v++)u=i.get(g,v)+d*a[v],i.set(g,v,u),i.set(v,g,u),r=u/m,n.set(g,v,r),n.set(v,g,r);return n}function c(e){var r,m,d,u,h;if(0===arguments.length)return 0===o?null:n;if(!l(e))throw new TypeError(p("invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==t)throw new Error(p("invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",t,e.shape[0]));for(o+=1,u=0;u<t;u++)for(a[u]=e.get(u)-s.get(u),d=a[u],h=0;h<=u;h++)m=i.get(u,h)+d*a[h],i.set(u,h,m),i.set(h,u,m),r=m/o,n.set(u,h,r),n.set(h,u,r);return n}};export{j as default};
//# sourceMappingURL=index.mjs.map
