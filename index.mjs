// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{isPrimitive as e}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-square-matrix@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-vector-like@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-ctor@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-ctor@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-numel@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@esm/index.mjs";function m(e,r){return(r?i:n)("float64",new s(e*e),[e,e],[e,1],0,"row-major")}function d(e){var r;return r=new s(e),i("float64",r,[e],[1],0,"row-major")}function l(n,i){var l,h,u,f,p,c;if(c=0,e(n))h=m(l=n,!1);else{if(!r(n))throw new TypeError(o("invalid argument. First argument must either specify the order of the covariance matrix or be a square two-dimensional ndarray for storing the covariance matrix. Value: `%s`.",n));l=n.shape[0],h=n}if(p=new s(l),f=m(l,!0),arguments.length>1){if(!t(i))throw new TypeError(o("invalid argument. Second argument must be a one-dimensional ndarray. Value: `%s`.",i));if(a(i.shape)!==l)throw new Error(o("invalid argument. The number of elements (means) in the second argument must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.",l,a(i.shape)));return u=i,j}return u=d(l),g;function g(e){var r,s,n,i,a,m,d,g,j;if(0===arguments.length)return 0===c?null:h;if(!t(e))throw new TypeError(o("invalid argument. Must provide a one-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==l)throw new Error(o("0dUA7",l,e.shape[0]));for(d=(m=c)/(c+=1),s=m||1,g=0;g<l;g++)for(a=u.get(g),p[g]=e.get(g)-a,a+=p[g]/c,u.set(g,a),n=d*p[g],j=0;j<=g;j++)i=f.get(g,j)+n*p[j],f.set(g,j,i),f.set(j,g,i),r=i/s,h.set(g,j,r),h.set(j,g,r);return h}function j(e){var r,s,n,i,a;if(0===arguments.length)return 0===c?null:h;if(!t(e))throw new TypeError(o("invalid argument. Must provide a one-dimensional ndarray. Value: `%s`.",e));if(e.shape[0]!==l)throw new Error(o("0dUA7",l,e.shape[0]));for(c+=1,i=0;i<l;i++)for(p[i]=e.get(i)-u.get(i),n=p[i],a=0;a<=i;a++)s=f.get(i,a)+n*p[a],f.set(i,a,s),f.set(a,i,s),r=s/c,h.set(i,a,r),h.set(a,i,r);return h}}export{l as default};
//# sourceMappingURL=index.mjs.map
