{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport isSquareMatrix from '@stdlib/assert-is-square-matrix';\nimport isVectorLike from '@stdlib/assert-is-vector-like';\nimport Float64Array from '@stdlib/array-float64';\nimport ctor from '@stdlib/ndarray-ctor';\nimport bctor from '@stdlib/ndarray-base-ctor';\nimport numel from '@stdlib/ndarray-base-numel';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a matrix.\n*\n* @private\n* @param {PositiveInteger} n - matrix order\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} matrix\n*/\nfunction createMatrix( n, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( n*n );\n\tshape = [ n, n ];\n\tstrides = [ n, 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n/**\n* Returns a vector.\n*\n* @private\n* @param {PositiveInteger} N - number of elements\n* @returns {ndarray} vector\n*/\nfunction createVector( N ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\n\tbuffer = new Float64Array( N );\n\tshape = [ N ];\n\tstrides = [ 1 ];\n\n\treturn bctor( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample covariance matrix.\n*\n* ## Method\n*\n* -   For each unbiased sample covariance, we begin by defining the co-moment \\\\(C_{jn}\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{n} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{C_{n-1}}{n-1} + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n-1}\n*     \\end{align*}\n*     ```\n*\n* @param {(PositiveInteger|ndarray)} out - order of the covariance matrix or a square 2-dimensional output ndarray for storing the covariance matrix\n* @param {ndarray} [means] - mean values\n* @throws {TypeError} first argument must be either a positive integer or a 2-dimensional ndarray having equal dimensions\n* @throws {TypeError} second argument must be a 1-dimensional ndarray\n* @throws {Error} number of means must match covariance matrix dimensions\n* @returns {Function} accumulator function\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* // Create an output covariance matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var cov = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a covariance matrix accumulator:\n* var accumulator = incrcovmat( cov );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === cov );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the covariance matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\nfunction incrcovmat( out, means ) {\n\tvar order;\n\tvar cov;\n\tvar mu;\n\tvar C;\n\tvar d;\n\tvar N;\n\n\tN = 0;\n\tif ( isPositiveInteger( out ) ) {\n\t\torder = out;\n\t\tcov = createMatrix( order, false );\n\t} else if ( isSquareMatrix( out ) ) {\n\t\torder = out.shape[ 0 ];\n\t\tcov = out;\n\t} else {\n\t\tthrow new TypeError( format( '1HBDb', out ) );\n\t}\n\t// Create a scratch array for storing residuals (i.e., `x_i - xbar_{i-1}`):\n\td = new Float64Array( order );\n\n\t// Create a low-level scratch matrix for storing co-moments:\n\tC = createMatrix( order, true );\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isVectorLike( means ) ) {\n\t\t\tthrow new TypeError( format( '1HBDc', means ) );\n\t\t}\n\t\tif ( numel( means.shape ) !== order ) {\n\t\t\tthrow new Error( format( '1HB9V', order, numel( means.shape ) ) );\n\t\t}\n\t\tmu = means; // TODO: should we copy this? Otherwise, internal state could be \"corrupted\" due to mutation outside the accumulator\n\t\treturn accumulator2;\n\t}\n\t// Create an ndarray vector for storing sample means (note: an ndarray interface is not necessary, but it reduces implementation complexity by ensuring a consistent abstraction for accessing and updating sample means):\n\tmu = createVector( order );\n\n\treturn accumulator1;\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated unbiased sample covariance matrix. If not provided a data vector, the accumulator function returns the current unbiased sample covariance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match covariance matrix dimensions\n\t* @returns {(ndarray|null)} unbiased sample covariance matrix or null\n\t*/\n\tfunction accumulator1( v ) {\n\t\tvar covij;\n\t\tvar denom;\n\t\tvar rdx;\n\t\tvar cij;\n\t\tvar m;\n\t\tvar n;\n\t\tvar r;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cov;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( '1HBDd', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( '1HB9W', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tn = N;\n\t\tN += 1;\n\t\tr = n / N;\n\n\t\tdenom = n || 1; // Bessel's correction (avoiding divide-by-zero below)\n\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\tm = mu.get( i );\n\n\t\t\t// Compute the residual:\n\t\t\td[ i ] = v.get( i ) - m;\n\n\t\t\t// Update the sample mean:\n\t\t\tm += d[ i ] / N;\n\t\t\tmu.set( i, m );\n\n\t\t\t// Update the co-moments and covariance matrix, recognizing that the covariance matrix is symmetric...\n\t\t\trdx = r * d[ i ]; // if `n=0`, `r=0.0`\n\t\t\tfor ( j = 0; j <= i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\tcovij = cij / denom;\n\t\t\t\tcov.set( i, j, covij );\n\t\t\t\tcov.set( j, i, covij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn cov;\n\t}\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated unbiased sample covariance matrix. If not provided a data vector, the accumulator function returns the current unbiased sample covariance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match covariance matrix dimensions\n\t* @returns {(ndarray|null)} unbiased sample covariance matrix or null\n\t*/\n\tfunction accumulator2( v ) {\n\t\tvar covij;\n\t\tvar cij;\n\t\tvar di;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cov;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( '1HBDd', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( '1HB9W', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tN += 1;\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t// Compute the residual:\n\t\t\td[ i ] = v.get( i ) - mu.get( i );\n\n\t\t\t// Update the co-moments and covariance matrix, recognizing that the covariance matrix is symmetric...\n\t\t\tdi = d[ i ];\n\t\t\tfor ( j = 0; j <= i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( di*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\tcovij = cij / N;\n\t\t\t\tcov.set( i, j, covij );\n\t\t\t\tcov.set( j, i, covij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn cov;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrcovmat;\n"],"names":["createMatrix","n","bool","bctor","ctor","Float64Array","incrcovmat","out","means","order","cov","mu","C","d","N","isPositiveInteger","isSquareMatrix","TypeError","format","shape","arguments","length","isVectorLike","numel","Error","v","covij","cij","di","i","j","get","set","buffer","createVector","denom","rdx","m","r"],"mappings":"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"}